name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:  # Permet de déclencher manuellement le workflow

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: |
        echo "Début de la compilation..."
        mvn -B clean package
        echo "Compilation terminée"

    - name: Run Tests
      run: |
        echo "Début des tests..."
        mvn test
        echo "Tests terminés"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/

    - name: Upload JaCoCo Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jacoco-report
        path: target/site/jacoco/

  sonar-analysis:
    name: SonarQube Analysis
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always()  # Toujours exécuter ce job

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: maven

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "Début de l'analyse SonarQube..."
        mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=redragon57_POC_CERENN \
          -Dsonar.organization=redragon57 \
          -Dsonar.host.url=https://sonarcloud.io
        echo "Analyse SonarQube terminée"

  deploy:
    name: Deploy
    needs: [build-and-test, sonar-analysis]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: |
        echo "Début de la compilation pour le déploiement..."
        mvn -B clean package
        echo "Compilation terminée"

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          Release créée automatiquement par le workflow CI/CD
          - Build: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Date: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/panneau-mvc-1.0-SNAPSHOT.jar
        asset_name: panneau-mvc-v${{ github.run_number }}.jar
        asset_content_type: application/java-archive 